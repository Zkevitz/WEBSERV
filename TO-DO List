WEBSERV


Modify handle post so that it works with the buffer
make everything clean
try upload of picture again + verify that text-files still works (maybe try other types of files to ensure it works all the time)


1. Project Initialization
* Set up basic structure:
    * Create directories for headers (/include), source files (/src), and configuration files (/config).
    * Create a Makefile that compiles the project with necessary rules (all, clean, fclean, re).
    * Test your Makefile with a basic "Hello World" to ensure it works.

2. Configuration File Parser
* Task: Develop the parser for the configuration file, which allows specifying:
    * Ports and hosts.
    * Default pages and error handling.
    * Routes, static file directories, and allowed HTTP methods.
    * CGI configurations and file upload settings.
* Steps:
    * Define a basic configuration format (inspired by NGINX).
    * Implement parsing logic that reads the configuration file and stores the settings.
    * Ensure that you can parse multiple servers and routes.
* Test: Create test configuration files and ensure your parser correctly loads the settings.

3. Socket Setup and Polling
* Task: Set up the sockets for each host/port combination in the configuration file.
* Steps:
    * Implement socket creation, binding, and listening.
    * Set up non-blocking I/O using poll() or an equivalent (like select(), epoll(), or kqueue()).
    * Handle multiple connections with a single poll() loop.
* Test: Test the server's ability to listen on multiple ports without blocking.

4. Request Parsing and Response Handling
* Task: Develop basic request parsing for HTTP methods (GET, POST, DELETE).
    * Handle headers, request paths, and body parsing.
* Steps:
    * Create a basic request parser that understands HTTP/1.1 requests.
    * Implement response handling with proper HTTP status codes.
    * Create default error pages for missing or invalid requests.
* Test: Use tools like curl or telnet to send basic GET and POST requests to ensure correct response behavior.

5. Static File Serving
* Task: Implement the serving of static files from directories specified in the configuration file.
* Steps:
    * Map request paths to local files.
    * Serve files with proper content types based on extensions (e.g., .html, .css, .js).
    * Implement directory listing if enabled.
* Test: Serve various static files (HTML, images, etc.) from a configured directory.

6. CGI Execution
* Task: Support executing CGI scripts based on file extensions (e.g., .php for PHP, .py for Python).
* Steps:
    * Implement logic to spawn a CGI process using fork() and execve().
    * Pass the request body to the CGI program via standard input and read the output via standard output.
    * Ensure proper handling of fragmented requests.
* Test: Use a simple PHP or Python CGI script to ensure the server executes and responds correctly.

7. File Uploads
* Task: Support file uploads in the POST method and save the files to a specified directory.
* Steps:
    * Implement parsing of multipart/form-data for file uploads.
    * Ensure file size limits are respected based on the configuration.
    * Save the uploaded file to the appropriate directory.
* Test: Test file uploads using HTML forms.

8. Error Handling and Custom Pages
* Task: Set up default and custom error pages for HTTP errors (404, 500, etc.).
* Steps:
    * Implement logic to display custom error pages based on configuration.
    * Provide default error pages if none are specified.
* Test: Trigger various errors (invalid routes, method not allowed) and ensure the server returns appropriate error pages.

9. Multi-Threaded/Stress Testing
* Task: Ensure that the server can handle multiple requests simultaneously and under stress.
* Steps:
    * Perform stress tests using tools like ApacheBench (ab) or custom scripts.
    * Implement optimizations for concurrency and resource management.
* Test: Test with high traffic and ensure the server remains resilient.

10. Final Testing and Deployment
* Task: Thoroughly test the server with various browsers and clients.
* Steps:
    * Ensure the server works with major browsers (Chrome, Firefox, etc.).
    * Test against NGINX to compare behavior and responses.
    * Test with different configurations and features (CGI, static files, uploads).
* Test: Validate all functionality, including performance and error handling.
